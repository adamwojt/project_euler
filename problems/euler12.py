#_______Description_____

#https://projecteuler.net/problem=12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1 3: 1,3 6: 1,2,3,610: 1,2,5,1015: 1,3,5,1521: 1,3,7,2128: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?
##_______end_description_____:

##I am only looking at numbers which prime factors are consecutive as per Ramanujan observations of highly composite numbers
import time
start_time = time.time()
 
from collections import Counter
import numpy as np
 
def count(n): #triangular function
    return n*(n+1)/2
 
primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29] #list of first 10 primes
 
def prime_factors(n): #function to spit prime factors but skips those that are not consecutive primes.
    factors=[];s=0;d=primes[s]
    try:
        while(d*d<=n):
            while(n>1):          
                while n%d==0:
                    factors.append(d)
                    n=n/d
                s+=1
                d=primes[s]
        return factors
    except: 
        pass
  
for i in range(1,10**8): #running triangular loop 
    factors=prime_factors(count(i))
    factorscount=list(Counter(factors).values()) #gives list of how many times each prime factor occurred
    factorsn=np.prod(np.array([x+1 for x in factorscount])) #calculating same as here: https://www.wikihow.com/Find-How-Many-Factors-Are-in-a-Number
    if factorsn >500: #if more than 500 spit number
        print(count(i))
        print('Number of factors =',factorsn)
        break
     
end_time=time.time()-start_time
print(end_time)


